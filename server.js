const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DATA_FILE = path.join(__dirname, 'price_history.json');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let priceHistory = [];
let isMonitoringActive = false;
let monitoringInterval = null;
let currentMonitoringSettings = {
    minAmount: 5000,
    bank: ''
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
function loadHistoryFromFile() {
    try {
        if (fs.existsSync(DATA_FILE)) {
            const data = fs.readFileSync(DATA_FILE, 'utf8');
            priceHistory = JSON.parse(data);
            console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        priceHistory = [];
    }
}

function saveHistoryToFile() {
    try {
        fs.writeFileSync(DATA_FILE, JSON.stringify(priceHistory, null, 2));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadHistoryFromFile();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('.'));

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é
function saveToHistory(buyData, sellData, minAmount, selectedBank) {
    try {
        const now = new Date();
        const buyAds = buyData.result?.items || [];
        const sellAds = sellData.result?.items || [];

        let buyPrice = 0;
        let sellPrice = 0;
        let buyerName = '';
        let sellerName = '';

        // –ë–µ—Ä–µ–º 3-–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–∏–Ω–¥–µ–∫—Å 2), –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–≤–æ–µ
        if (buyAds.length > 2 && buyAds[2].price) {
            buyPrice = parseFloat(buyAds[2].price);
            buyerName = buyAds[2].nickName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        } else if (buyAds.length > 0 && buyAds[0].price) {
            buyPrice = parseFloat(buyAds[0].price);
            buyerName = buyAds[0].nickName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        if (sellAds.length > 2 && sellAds[2].price) {
            sellPrice = parseFloat(sellAds[2].price);
            sellerName = sellAds[2].nickName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        } else if (sellAds.length > 0 && sellAds[0].price) {
            sellPrice = parseFloat(sellAds[0].price);
            sellerName = sellAds[0].nickName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã
        if (buyPrice > 0 || sellPrice > 0) {
            const spread = sellPrice - buyPrice;
            const spreadPercent = buyPrice > 0 ? ((spread / buyPrice) * 100) : 0;

            const record = {
                timestamp: now.toISOString(),
                date: now.toDateString(),
                time: now.toTimeString().split(' ')[0],
                hour: now.getHours(),
                dayOfWeek: now.toLocaleDateString('ru', { weekday: 'long' }),
                buyPrice: buyPrice,
                sellPrice: sellPrice,
                spread: spread,
                spreadPercent: spreadPercent,
                buyerName: buyerName,
                sellerName: sellerName,
                minAmount: minAmount,
                selectedBank: selectedBank || '–≤—Å–µ'
            };

            priceHistory.push(record);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 5000 –∑–∞–ø–∏—Å–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–µ–¥–µ–ª—è –¥–∞–Ω–Ω—ã—Ö)
            if (priceHistory.length > 5000) {
                priceHistory.shift();
            }

            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            if (priceHistory.length % 10 === 0) {
                saveHistoryToFile();
            }

            console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${record.time} | –ü–æ–∫—É–ø–∫–∞: ${buyPrice.toFixed(2)} ‚Ç¥ | –ü—Ä–æ–¥–∞–∂–∞: ${sellPrice.toFixed(2)} ‚Ç¥`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startServerMonitoring() {
    if (isMonitoringActive) return;
    
    isMonitoringActive = true;
    console.log('üöÄ –ó–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 24/7');
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    performMonitoringRequest();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    monitoringInterval = setInterval(() => {
        performMonitoringRequest();
    }, 30000);
}

function stopServerMonitoring() {
    if (!isMonitoringActive) return;
    
    isMonitoringActive = false;
    
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
    }
    
    console.log('‚èπÔ∏è –°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

async function performMonitoringRequest() {
    try {
        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
        
        const { minAmount, bank } = currentMonitoringSettings;
        const paymentFilter = [];
        
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT
        const buyResponse = await fetch('https://api2.bybit.com/fiat/otc/item/online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({
                userId: "",
                tokenId: "USDT",
                currencyId: "UAH",
                payment: paymentFilter,
                side: "1",
                size: "20",
                page: "1",
                amount: minAmount.toString(),
                authMaker: false,
                canTrade: false
            })
        });

        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT
        const sellResponse = await fetch('https://api2.bybit.com/fiat/otc/item/online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({
                userId: "",
                tokenId: "USDT",
                currencyId: "UAH",
                payment: paymentFilter,
                side: "0",
                size: "20",
                page: "1",
                amount: minAmount.toString(),
                authMaker: false,
                canTrade: false
            })
        });

        if (buyResponse.ok && sellResponse.ok) {
            const buyData = await buyResponse.json();
            const sellData = await sellResponse.json();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const filterNewUsers = (items) => {
                return items.filter(item => {
                    const isNewUserOffer = item.isNewUserOffer || item.newUserOffer || false;
                    return !isNewUserOffer;
                });
            };

            const filteredBuyData = {
                ...buyData,
                result: {
                    ...buyData.result,
                    items: filterNewUsers(buyData.result?.items || [])
                }
            };

            const filteredSellData = {
                ...sellData,
                result: {
                    ...sellData.result,
                    items: filterNewUsers(sellData.result?.items || [])
                }
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            saveToHistory(filteredBuyData, filteredSellData, minAmount, bank);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    }
}

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
app.post('/api/monitoring/start', (req, res) => {
    try {
        const { minAmount = 5000, bank = '' } = req.body;
        
        if (isMonitoringActive) {
            return res.json({
                success: false,
                message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
            });
        }

        currentMonitoringSettings = { minAmount, bank };
        startServerMonitoring();
        
        res.json({
            success: true,
            message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω'
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.post('/api/monitoring/stop', (req, res) => {
    try {
        stopServerMonitoring();
        
        res.json({
            success: true,
            message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.get('/api/monitoring/status', (req, res) => {
    res.json({
        success: true,
        isActive: isMonitoringActive,
        settings: currentMonitoringSettings,
        recordsCount: priceHistory.length
    });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è P2P –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
app.post('/api/p2p-data', async (req, res) => {
    try {
        const { minAmount = 5000, bank = '' } = req.body;
        console.log(`–ó–∞–ø—Ä–æ—Å P2P –¥–∞–Ω–Ω—ã—Ö Bybit —Å –º–∏–Ω. —Å—É–º–º–æ–π: ${minAmount} ‚Ç¥, –±–∞–Ω–∫: ${bank || '–≤—Å–µ'}`);
        
        const paymentFilter = [];
        
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT
        const buyResponse = await fetch('https://api2.bybit.com/fiat/otc/item/online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({
                userId: "",
                tokenId: "USDT",
                currencyId: "UAH",
                payment: paymentFilter,
                side: "1",
                size: "20",
                page: "1",
                amount: minAmount.toString(),
                authMaker: false,
                canTrade: false
            })
        });

        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT
        const sellResponse = await fetch('https://api2.bybit.com/fiat/otc/item/online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({
                userId: "",
                tokenId: "USDT",
                currencyId: "UAH",
                payment: paymentFilter,
                side: "0",
                size: "20",
                page: "1",
                amount: minAmount.toString(),
                authMaker: false,
                canTrade: false
            })
        });

        if (!buyResponse.ok || !sellResponse.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit');
        }

        const buyData = await buyResponse.json();
        const sellData = await sellResponse.json();

        console.log(`–°—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: –ø–æ–∫—É–ø–∫–∞ ${buyData.result?.items?.length || 0}, –ø—Ä–æ–¥–∞–∂–∞ ${sellData.result?.items?.length || 0}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const filterNewUsers = (items) => {
            return items.filter(item => {
                const isNewUserOffer = item.isNewUserOffer || item.newUserOffer || false;
                return !isNewUserOffer;
            });
        };

        const filteredBuyData = {
            ...buyData,
            result: {
                ...buyData.result,
                items: filterNewUsers(buyData.result?.items || [])
            }
        };

        const filteredSellData = {
            ...sellData,
            result: {
                ...sellData.result,
                items: filterNewUsers(sellData.result?.items || [])
            }
        };

        console.log(`–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ø–æ–∫—É–ø–∫–∞ ${filteredBuyData.result.items.length}, –ø—Ä–æ–¥–∞–∂–∞ ${filteredSellData.result.items.length}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        saveToHistory(filteredBuyData, filteredSellData, minAmount, bank);
        
        res.json({
            success: true,
            buyData: filteredBuyData,
            sellData: filteredSellData,
            minAmount,
            bank: bank || '–≤—Å–µ',
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/api/analytics', (req, res) => {
    try {
        if (priceHistory.length === 0) {
            return res.json({
                success: true,
                message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                totalRecords: 0,
                hourlyAnalytics: [],
                latestData: []
            });
        }

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
        const hourlyData = {};
        
        priceHistory.forEach(record => {
            const hour = record.hour;
            if (!hourlyData[hour]) {
                hourlyData[hour] = {
                    hour: hour,
                    count: 0,
                    avgBuyPrice: 0,
                    avgSellPrice: 0,
                    avgSpread: 0,
                    minBuyPrice: record.buyPrice,
                    maxSellPrice: record.sellPrice,
                    records: []
                };
            }

            const hd = hourlyData[hour];
            hd.count++;
            hd.avgBuyPrice = (hd.avgBuyPrice * (hd.count - 1) + record.buyPrice) / hd.count;
            hd.avgSellPrice = (hd.avgSellPrice * (hd.count - 1) + record.sellPrice) / hd.count;
            hd.avgSpread = (hd.avgSpread * (hd.count - 1) + record.spreadPercent) / hd.count;
            hd.minBuyPrice = Math.min(hd.minBuyPrice, record.buyPrice);
            hd.maxSellPrice = Math.max(hd.maxSellPrice, record.sellPrice);
        });

        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
        const hourlyAnalytics = Object.values(hourlyData).sort((a, b) => a.hour - b.hour);

        res.json({
            success: true,
            totalRecords: priceHistory.length,
            hourlyAnalytics: hourlyAnalytics,
            latestData: priceHistory.slice(-10).reverse() // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
app.get('/api/export-data', (req, res) => {
    try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
        saveHistoryToFile();
        
        res.json({
            success: true,
            data: priceHistory,
            totalRecords: priceHistory.length,
            exportDate: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.post('/api/import-data', (req, res) => {
    try {
        const { data } = req.body;
        
        if (!Array.isArray(data)) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }
        
        priceHistory.length = 0; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        priceHistory.push(...data); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        
        saveHistoryToFile();
        
        res.json({
            success: true,
            message: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π`,
            totalRecords: priceHistory.length
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
    console.log('üìä P2P –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    process.on('SIGINT', () => {
        console.log('\n‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
        saveHistoryToFile();
        process.exit(0);
    });
});